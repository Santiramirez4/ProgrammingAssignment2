rm(list = ls()) ## Clear all Working space variables
setwd("~/Personal/Specialization/R_Programming/course2_assignment2/ProgrammingAssignment2")
source("cachematrix.R")

m1 <- matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol = 2)
m2 <- matrix(c(4, 2, 7, 6), nrow = 2, ncol = 2)

Validate_m1_inv <- solve(m1)
Validate_m2_inv <- solve(m2)

aMatrix <- makeCacheMatrix(m1) ## Creates an Object type "MakeCacheMatrix" to be used as a paremeter when calling "cachesolve"
aMatrix$get()               # retrieve the value of x. Since the makeCacheMatrix function was used, the return value will be x, that has the same Matrix given as parameter
aMatrix$getinverse()           # retrieve the value of m, which is NULL because there is no (untill this point) inverse value stored in m.
aMatrix$set(m1)          # set the matrix to the value of m1 to get its inverse (already confirmed it is a square invertible matrix)
cacheSolve(aMatrix)          # Inverse is calculated from m1 for the first time. The answer (the inverse) is stored in "m". "m" is not NULL anymore
aMatrix$getinverse()           # retrieve it directly, now that it has been cached

## Validate Function return match with the previously INV calculated (Only for validating purposes)

identical(aMatrix$getinverse(), Validate_m1_inv)	## Validate if 2 matrix are identical. Answer is TRUE

aMatrix$set(m2)         ## Set a new Matrix, so the inverse will ve calculated from this matrix
aMatrix$getinverse()     ## Returns again NULL because the Matrix has changed. A new Inverse has to be calculated (for this Matrix) to be ables to get it ffrom Cache
cacheSolve(aMatrix)	## Inverse of new Matrix (m2) is calculated
aMatrix$getinverse()	## Get the inverse value from Cache. Since the value was already calculated, there is an answer

## Validate Function return match with the previously INV calculated (Only for validating purposes)

identical(aMatrix$getinverse(), Validate_m2_inv)	## Validate if 2 matrix are identical. Answer is TRUE


C:\Users\IBM_ADMIN\Documents\Personal\Specialization\R_Programming\course2_assignment2
